name: Build Polkadot binaries and images

on:
  workflow_dispatch:
  # push:
  #   branches: "*"
  #   paths:
  #     - .github/workflows/polkadot.yml
  #     - dockerfiles/Dockerfile-env-test
  #     - dockerfiles/Dockerfile-env-amd64
  #     - dockerfiles/Dockerfile-amd64
  #     - config.yml
  # pull_request:
  #   paths:
  #     - .github/workflows/polkadot.yml
  #     - dockerfiles/Dockerfile-env-test
  #     - dockerfiles/Dockerfile-env-amd64
  #     - dockerfiles/Dockerfile-amd64
  #     - config.yml

env:
  REGISTRY: ghcr.io
jobs:
  build-docker-images:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      ENV_IMAGE_NAME: "${{ github.repository_owner }}/substrate-cross-compiler-env"
    outputs:
      image-name: ${{ steps.env-vars.outputs.image-name }}
    strategy:
      fail-fast: false
      matrix:
        debian-versions: [bullseye, bookworm]
        rust-versions: [1.81.0]
        clang-versions: [17, 19]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set environmental variables
        id: env-vars
        run: |
          echo "ENV_FULL_IMAGE_NAME=${{ env.REGISTRY }}/${{ env.ENV_IMAGE_NAME }}:debian-${{ matrix.debian-versions }}-rust-${{ matrix.rust-versions }}-clang-${{ matrix.clang-versions }}" >> "$GITHUB_ENV"
          echo "image-name=${{ env.REGISTRY }}/${{ env.ENV_IMAGE_NAME }}" >> "$GITHUB_OUTPUT"
          echo "CODE_GIT_REPO=$(cat config.yml | yq -r '.polkadot.code_git_repo' | tr -d '\n')" >> "$GITHUB_ENV"
          echo "CODE_GIT_REF=$(cat config.yml | yq -r '.polkadot.code_git_ref' | tr -d '\n')" >> "$GITHUB_ENV"
      - name: Check Docker image
        run: |
          if docker manifest inspect "${ENV_FULL_IMAGE_NAME}" > /dev/null 2>&1; then
            echo "Image ${ENV_FULL_IMAGE_NAME} exists in the registry."
            echo "CONTINUE_IMAGE_BUILD=false" >> "$GITHUB_ENV"
          else
            echo "Image ${ENV_FULL_IMAGE_NAME} does not exist in the registry."
            echo "CONTINUE_IMAGE_BUILD=true" >> "$GITHUB_ENV"
          fi
      - name: Set up QEMU
        if: env.CONTINUE_IMAGE_BUILD == 'true'
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        if: env.CONTINUE_IMAGE_BUILD == 'true'
        uses: docker/setup-buildx-action@v3
      - name: Log in to Container registry
        if: env.CONTINUE_IMAGE_BUILD == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: Extract metadata (tags, labels) for Docker
        if: env.CONTINUE_IMAGE_BUILD == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.ENV_IMAGE_NAME }}
      - name: Build and push Docker image
        if: env.CONTINUE_IMAGE_BUILD == 'true'
        uses: docker/build-push-action@v6
        with:
          context: dockerfiles
          file: dockerfiles/Dockerfile-env-amd64
          push: false
          load: true
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            DEBIAN_VERSION=${{ matrix.debian-versions }}
            RUST_STABLE_VERSION=${{ matrix.rust-versions }}
            CLANG_VERSION=${{ matrix.clang-versions }}
          tags: ${{ env.ENV_FULL_IMAGE_NAME }},image-to-test:latest
      - name: Switch to default Docker builder
        if: env.CONTINUE_IMAGE_BUILD == 'true'
        run: docker buildx use default
      - name: Build node to test Docker image
        if: env.CONTINUE_IMAGE_BUILD == 'true'
        uses: docker/build-push-action@v6
        with:
          context: dockerfiles
          file: dockerfiles/Dockerfile-env-test
          push: false
          pull: false
          build-args: |
            IMAGE_VERSION=image-to-test:latest
            GIT_REPO=${{ env.CODE_GIT_REPO }}
            GIT_REF=${{ env.CODE_GIT_REF }}
          tags: test-build-image
      - name: Push Docker image
        if: ${{ env.CONTINUE_IMAGE_BUILD == 'true' }}
        run: docker push ${{ env.ENV_FULL_IMAGE_NAME }}
  build-binaries:
    runs-on: ubuntu-latest
    needs: [build-docker-images]
    permissions:
      contents: write
      packages: write
    container:
      image: ${{ needs.build-docker-images.outputs.image-name }}:debian-${{ matrix.debian-versions }}-rust-${{ matrix.rust-versions }}-clang-${{ matrix.clang-versions }}
      options: --user 0:0 --privileged -v /var/run/docker.sock:/var/run/docker.sock
    strategy:
      fail-fast: false
      matrix:
        debian-versions: [bullseye, bookworm]
        rust-versions: [1.81.0]
        clang-versions: [17, 19]
        rustc-targets: ["x86-64-v3"]
        # "polkadot-parachain" with runtimes is too big for free runers
        components: ["polkadot", "substrate-node", "polkadot-parachain"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set environmental variables
        run: |
          echo "CODE_GIT_REPO=$(cat config.yml | yq -r '.polkadot.code_git_repo' | tr -d '\n')" >> "$GITHUB_ENV"
          CODE_GIT_REF=$(cat config.yml | yq -r '.polkadot.code_git_ref' | tr -d '\n')
          echo "CODE_GIT_REF=${CODE_GIT_REF}" >> "$GITHUB_ENV"
          VERSION=$( echo "${CODE_GIT_REF}" | sed -E 's/^polkadot-//')
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          BUILD_VERSION="debian-${{ matrix.debian-versions }}-rust-${{ matrix.rust-versions }}-clang-${{ matrix.clang-versions }}-${{ matrix.rustc-targets }}"
          echo "BINARY_FILE_NAME=${{ matrix.components }}-${VERSION}-${BUILD_VERSION}" >> $GITHUB_ENV
          echo "EXECUTE_WORKER_BINARY_FILE_NAME=${{ matrix.components }}-${VERSION}-execute-worker-${BUILD_VERSION}" >> $GITHUB_ENV
          echo "PREPARE_WORKER_BINARY_FILE_NAME=${{ matrix.components }}-${VERSION}-prepare-worker-${BUILD_VERSION}" >> $GITHUB_ENV
          echo "FULL_IMAGE_NAME=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.components }}:${VERSION}-${BUILD_VERSION}" >> "$GITHUB_ENV"
          git config --global --add safe.directory $(pwd)
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.CODE_GIT_REPO }} 
          path: git-content
          ref: ${{ env.CODE_GIT_REF }}
          fetch-depth: 1
      - name: Build binaries
        working-directory: ./git-content
        env:
          RUSTFLAGS: "-C target-cpu=${{ matrix.rustc-targets }}"
          CFLAGS: "-pipe -fstack-protector-strong -D_FORTIFY_SOURCE=2 -march=${{ matrix.rustc-targets }}"
          CXXFLAGS: "-pipe -fstack-protector-strong -D_FORTIFY_SOURCE=2 -march=${{ matrix.rustc-targets }}"
        run: |
          export WASM_BUILD_WORKSPACE_HINT=$(pwd)
          export BINARIES_DIR=/opt/cargo_target/x86_64-unknown-linux-gnu/production
          env
          mkdir ${GITHUB_WORKSPACE}/artifacts
          echo "Build ${{ matrix.components }}"
          if [ "${{ matrix.components }}" = "polkadot" ]; then
            cargo build --profile production --locked --bin polkadot --bin polkadot-execute-worker --bin polkadot-prepare-worker --target x86_64-unknown-linux-gnu
            ls ${BINARIES_DIR}
            cp ${BINARIES_DIR}/polkadot ${GITHUB_WORKSPACE}/artifacts
            cp ${BINARIES_DIR}/polkadot-execute-worker ${GITHUB_WORKSPACE}/artifacts
            cp ${BINARIES_DIR}/polkadot-prepare-worker ${GITHUB_WORKSPACE}/artifacts
          fi
          if [ "${{ matrix.components }}" = "polkadot-parachain" ]; then
            export SKIP_WASM_BUILD=1
            cargo build --profile production --locked --bin polkadot-parachain --target x86_64-unknown-linux-gnu
            ls ${BINARIES_DIR}
            cp ${BINARIES_DIR}/polkadot-parachain ${GITHUB_WORKSPACE}/artifacts
          fi
          if [ "${{ matrix.components }}" = "substrate-node" ]; then
            cargo build --profile production --locked --bin substrate-node --target x86_64-unknown-linux-gnu
            ls ${BINARIES_DIR}
            cp ${BINARIES_DIR}/substrate-node ${GITHUB_WORKSPACE}/artifacts
          fi
      - name: Create GitHub release
        uses: "actions/github-script@v6"
        with:
          script: |
            try {
              const response = await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: process.env.CODE_GIT_REF,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: process.env.CODE_GIT_REF,
              });
            } catch (error) {
              core.notice(error.message);
            }
      - name: Upload binaries to GitHub release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          mkdir gh_artifacts
          echo "Upload ${{ matrix.components }}"
          if [ "${{ matrix.components }}" = "polkadot" ]; then
            cp artifacts/polkadot gh_artifacts/${BINARY_FILE_NAME}
            cp artifacts/polkadot-execute-worker gh_artifacts/${EXECUTE_WORKER_BINARY_FILE_NAME}
            cp artifacts/polkadot-prepare-worker gh_artifacts/${PREPARE_WORKER_BINARY_FILE_NAME}
            gh release upload ${{ env.CODE_GIT_REF }} gh_artifacts/${BINARY_FILE_NAME} --clobber
            gh release upload ${{ env.CODE_GIT_REF }} gh_artifacts/${EXECUTE_WORKER_BINARY_FILE_NAME} --clobber
            gh release upload ${{ env.CODE_GIT_REF }} gh_artifacts/${PREPARE_WORKER_BINARY_FILE_NAME} --clobber
          fi
          if [ "${{ matrix.components }}" = "polkadot-parachain" ]; then
            cp artifacts/polkadot-parachain gh_artifacts/${BINARY_FILE_NAME}
            gh release upload ${{ env.CODE_GIT_REF }} gh_artifacts/${BINARY_FILE_NAME} --clobber
          fi
          if [ "${{ matrix.components }}" = "substrate-node" ]; then
            cp artifacts/substrate-node gh_artifacts/${BINARY_FILE_NAME}
            gh release upload ${{ env.CODE_GIT_REF }} gh_artifacts/${BINARY_FILE_NAME} --clobber
          fi
      - name: Log in to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          file: dockerfiles/Dockerfile-amd64
          context: artifacts
          push: true
          load: true
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            DEBIAN_VERSION=${{ matrix.debian-versions }}
            BINARY_NAME=${{ matrix.components }}
          tags: ${{ env.FULL_IMAGE_NAME }}
