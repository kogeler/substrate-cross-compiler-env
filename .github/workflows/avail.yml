name: Build Avail binaries

on:
  push:
    branches:
    paths:
      - .github/workflows/avail.yml
      - config.yml
  pull_request:
    paths:
      - .github/workflows/avail.yml
      - config.yml

jobs:
  build-binaries:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    container:
      image: ghcr.io/kogeler/substrate-cross-compiler-env:debian-${{ matrix.debian-versions }}-rust-${{ matrix.rust-versions }}-clang-${{ matrix.clang-versions }}
      env:
        RUSTFLAGS: "-C target-cpu=${{ matrix.rustc-targets }}"
        GH_TOKEN: ${{ github.token }}
      options: --user 0:0
    strategy:
      fail-fast: false
      matrix:
        debian-versions: [bookworm]
        rust-versions: [1.81.0]
        clang-versions: [17]
        rustc-targets: ["x86-64-v2", "x86-64-v3"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set environmental variables
        run: |
          echo "CODE_GIT_REPO=$(cat config.yml | yq -r '.avail.code_git_repo' | tr -d '\n')" >> "$GITHUB_ENV"
          CODE_GIT_REF=$(cat config.yml | yq -r '.avail.code_git_ref' | tr -d '\n')
          echo "CODE_GIT_REF=${CODE_GIT_REF}" >> $GITHUB_ENV
          echo "PUSH_GIT_REF=$(cat config.yml | yq -r '.avail.push_git_ref' | tr -d '\n')" >> "$GITHUB_ENV"
          ENV_VERSION="debian-${{ matrix.debian-versions }}-rust-${{ matrix.rust-versions }}-clang-${{ matrix.clang-versions }}-${{ matrix.rustc-targets }}"
          echo "BINARY_FILE_NAME=${CODE_GIT_REF}-${ENV_VERSION}" >> $GITHUB_ENV
          echo "EXECUTE_WORKER_BINARY_FILE_NAME=${CODE_GIT_REF}-execute-worker-${ENV_VERSION}" >> $GITHUB_ENV
          echo "PREPARE_WORKER_BINARY_FILE_NAME=${CODE_GIT_REF}-prepare-worker-${ENV_VERSION}" >> $GITHUB_ENV
          git config --global --add safe.directory $(pwd)
      - name: Checkout polkadot-sdk repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.CODE_GIT_REPO }}
          path: git-content
          ref: ${{ env.CODE_GIT_REF }}
      - name: Build binaries
        run: |
          cd git-content
          cargo build --release --locked --target x86_64-unknown-linux-gnu
          ls /opt/cargo_target/x86_64-unknown-linux-gnu/release
      - name: "Create release"
        if: ${{ github.ref == env.PUSH_GIT_REF }}
        uses: "actions/github-script@v6"
        with:
          script: |
            try {
              const response = await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: 'avail-' + process.env.CODE_GIT_REF,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: 'avail-' + process.env.CODE_GIT_REF,
              });
            } catch (error) {
              core.notice(error.message);
            }
      - name: Upload binaries
        if: ${{ github.ref == env.PUSH_GIT_REF }}
        run: |
          BINARIES_DIR=${CARGO_TARGET_DIR}/x86_64-unknown-linux-gnu/release
          mv ${BINARIES_DIR}/avail-node ${BINARIES_DIR}/avail-${BINARY_FILE_NAME}
          ls ${BINARIES_DIR}
          gh release upload avail-${{ env.CODE_GIT_REF }} ${BINARIES_DIR}/avail-${BINARY_FILE_NAME}
